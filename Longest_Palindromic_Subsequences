def longest_palindromic_subsequence(s):
    n = len(s)
    dp = [[0] * n for _ in range(n)]

    for i in range(n):
        dp[i][i] = 1

    for length in range(2, n + 1):  
        for i in range(n - length + 1):
            j = i + length - 1  
            if s[i] == s[j]:
                if length == 2:
                    dp[i][j] = 2  
                else:
                    dp[i][j] = 2 + dp[i + 1][j - 1]
            else:
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])

    return dp[0][n - 1]

def main():
    
    input_str = input("Enter a string: ").strip()

    normalized_str = ''.join(c.lower() for c in input_str if c.isalnum())

    length = longest_palindromic_subsequence(normalized_str)
    print(length)

if __name__ == "__main__":
    main()
